All passwords = password
All keys and certs create with kse. 
See e.g. https://docs.oracle.com/javase/9/tools/keytool.html

Generate PKC for srvone for RSA key signed by CA with RSA key: 

Server:
keytool -storepass password -keystore ocl_ca.pkcs12 -gencert -validity 3600 -alias ca_root_rsa -infile srvone_rsa.csr -outfile srvone_cert_rsa.cer -rfc

keytool -storepass password -keystore ocl_ca.pkcs12 -gencert -validity 3600 -alias ca_root_ec -infile srvone_ec.csr -outfile srvone_cert_ecdsa.cer -rfc

Warning: in Windows must use -outfile option, not >. Otherwise, server cert signed by CA generated by keytool cannot be parsed by keytool, but it is parsed by Windows. 

Extensions: 
keytool -storepass password -keystore ocl_ca.pkcs12 -gencert -validity 3600 -ext KU=digitalSignature,keyEncipherment -alias ca_root_rsa -infile srvone_rsa.csr -outfile srvone_cert_rsa.cer -rfc

keytool -storepass password -keystore ocl_ca.pkcs12 -gencert -validity 3600 -ext KU=digitalSignature -alias ca_root_ec -infile srvone_ec.csr -outfile srvone_cert_ecdsa.cer -rfc

Client:
keytool -storepass password -keystore ocl_ca.pkcs12 -gencert -validity 3600 -ext KU=digitalSignature,keyEncipherment -alias ca_root_rsa -infile clione_rsa.csr -outfile clione_cert_rsa.cer -rfc

keytool -storepass password -keystore ocl_ca.pkcs12 -gencert -validity 3600 -ext KU=digitalSignature -alias ca_root_ec -infile clione_ec.csr -outfile clione_cert_ec.cer -rfc


Display with Java keytool: 
keytool -printcert -v -file cert.cer

Display with Windows certutil: 

certutil -dump srvone_cert_rsa.cer
certutil -dump srvone_ecdsa_p256.cer

 
*****************

keytool -storepass password -keystore car.jceks -gencert -validity 1000 -alias ca_root -infile alice.csr -rfc > alice-ca1.pem

keytool -storepass password -keystore car.jceks -gencert -validity 1000 -alias ca_root -infile bob.csr -rfc > bob-ca1.pem

******************

Java Keytool can be used to sign a CSR (Certificate Signing Request) file using the "keytool -gencert" command, which supports the following options:

C:Usersfyicenter>"Program Filesjavajre7inkeytool" -gencert -help

keytool -gencert [OPTION]...

Generates certificate from a certificate request

Options:

 -rfc                            output in RFC style
 -infile <filename>              input file name
 -outfile <filename>             output file name
 -alias <alias>                  alias name of the entry to process
 -sigalg <sigalg>                signature algorithm name
 -dname <dname>                  distinguished name
 -startdate <startdate>          certificate validity start date/time
 -ext <value>                    X.509 extension
 -validity <valDays>             validity number of days
 -keypass <arg>                  key password
 -keystore <keystore>            keystore name
 -storepass <arg>                keystore password
 -storetype <storetype>          keystore type
 -providername <providername>    provider name
 -providerclass <providerclass>  provider class name
 -providerarg <arg>              provider argument
 -providerpath <pathlist>        provider classpath
 -v                              verbose output
 -protected                      password through protected mechanism

Use "keytool -help" for all available commands

The "keytool -gencert" command generates a certificate as a response to a certificate request file (which can be created by the keytool -certreq command). The command reads the request from infile (if omitted, from the standard input), signs it using alias's private key, and output the X.509 certificate into outfile (if omitted, to the standard output). If -rfc is specified, output format is BASE64-encoded PEM; otherwise, a binary DER is created.

sigalg specifies the algorithm that should be used to sign the certificate. startdate is the start time/date that the certificate is valid. valDays tells the number of days for which the certificate should be considered valid.

If dname is provided, it's used as the subject of the generated certificate. Otherwise, the one from the certificate request is used.

ext shows what X.509 extensions will be embedded in the certificate.

Java Keytool can be used to sign a CSR (Certificate Signing Request) file using the "keytool -gencert" command, which supports the following options:

C:\Users\fyicenter>"\Program Files\java\jre7\bin\keytool" -gencert -help

keytool -gencert [OPTION]...

Generates certificate from a certificate request

Options:

 -rfc                            output in RFC style
 -infile <filename>              input file name
 -outfile <filename>             output file name
 -alias <alias>                  alias name of the entry to process
 -sigalg <sigalg>                signature algorithm name
 -dname <dname>                  distinguished name
 -startdate <startdate>          certificate validity start date/time
 -ext <value>                    X.509 extension
 -validity <valDays>             validity number of days
 -keypass <arg>                  key password
 -keystore <keystore>            keystore name
 -storepass <arg>                keystore password
 -storetype <storetype>          keystore type
 -providername <providername>    provider name
 -providerclass <providerclass>  provider class name
 -providerarg <arg>              provider argument
 -providerpath <pathlist>        provider classpath
 -v                              verbose output
 -protected                      password through protected mechanism

Use "keytool -help" for all available commands

The "keytool -gencert" command generates a certificate as a response to a certificate request file (which can be created by the keytool -certreq command). The command reads the request from infile (if omitted, from the standard input), signs it using alias's private key, and output the X.509 certificate into outfile (if omitted, to the standard output). If -rfc is specified, output format is BASE64-encoded PEM; otherwise, a binary DER is created.

sigalg specifies the algorithm that should be used to sign the certificate. startdate is the start time/date that the certificate is valid. valDays tells the number of days for which the certificate should be considered valid.

If dname is provided, it's used as the subject of the generated certificate. Otherwise, the one from the certificate request is used.

ext shows what X.509 extensions will be embedded in the certificate. 

